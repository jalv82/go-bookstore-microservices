// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AuthorRequestDTO defines model for AuthorRequestDTO.
type AuthorRequestDTO struct {
	BookId *string `json:"bookId,omitempty"`
	Id     string  `json:"id"`
	Name   string  `json:"name"`
}

// AuthorResponseDTO defines model for AuthorResponseDTO.
type AuthorResponseDTO struct {
	BookId *string `json:"bookId,omitempty"`
	Id     string  `json:"id"`
	Name   string  `json:"name"`
}

// ErrorResponseDTO defines model for ErrorResponseDTO.
type ErrorResponseDTO struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// AuthorId defines model for AuthorId.
type AuthorId = string

// CreateAuthorJSONRequestBody defines body for CreateAuthor for application/json ContentType.
type CreateAuthorJSONRequestBody = AuthorRequestDTO

// UpdateAuthorJSONRequestBody defines body for UpdateAuthor for application/json ContentType.
type UpdateAuthorJSONRequestBody = AuthorRequestDTO

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthors request
	GetAuthors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthor request with any body
	CreateAuthorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthor(ctx context.Context, body CreateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthor request with any body
	UpdateAuthorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthor(ctx context.Context, body UpdateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthor request
	DeleteAuthor(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthor request
	GetAuthor(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthor(ctx context.Context, body CreateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthor(ctx context.Context, body UpdateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthor(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorRequest(c.Server, authorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthor(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorRequest(c.Server, authorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthorsRequest generates requests for GetAuthors
func NewGetAuthorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/author")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthorRequest calls the generic CreateAuthor builder with application/json body
func NewCreateAuthorRequest(server string, body CreateAuthorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAuthorRequestWithBody generates requests for CreateAuthor with any type of body
func NewCreateAuthorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/author")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAuthorRequest calls the generic UpdateAuthor builder with application/json body
func NewUpdateAuthorRequest(server string, body UpdateAuthorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthorRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAuthorRequestWithBody generates requests for UpdateAuthor with any type of body
func NewUpdateAuthorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/author")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthorRequest generates requests for DeleteAuthor
func NewDeleteAuthorRequest(server string, authorId AuthorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorId", runtime.ParamLocationPath, authorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/author/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorRequest generates requests for GetAuthor
func NewGetAuthorRequest(server string, authorId AuthorId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorId", runtime.ParamLocationPath, authorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/author/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthors request
	GetAuthorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthorsResponse, error)

	// CreateAuthor request with any body
	CreateAuthorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorResponse, error)

	CreateAuthorWithResponse(ctx context.Context, body CreateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthorResponse, error)

	// UpdateAuthor request with any body
	UpdateAuthorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorResponse, error)

	UpdateAuthorWithResponse(ctx context.Context, body UpdateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorResponse, error)

	// DeleteAuthor request
	DeleteAuthorWithResponse(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*DeleteAuthorResponse, error)

	// GetAuthor request
	GetAuthorWithResponse(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*GetAuthorResponse, error)
}

type GetAuthorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthorResponseDTO
	JSON400      *ErrorResponseDTO
	JSON500      *ErrorResponseDTO
}

// Status returns HTTPResponse.Status
func (r GetAuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthorResponseDTO
	JSON400      *ErrorResponseDTO
	JSON500      *ErrorResponseDTO
}

// Status returns HTTPResponse.Status
func (r CreateAuthorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAuthorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *AuthorResponseDTO
	JSON400      *ErrorResponseDTO
	JSON500      *ErrorResponseDTO
}

// Status returns HTTPResponse.Status
func (r UpdateAuthorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseDTO
	JSON500      *ErrorResponseDTO
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON400      *ErrorResponseDTO
	JSON500      *ErrorResponseDTO
}

// Status returns HTTPResponse.Status
func (r GetAuthorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthorsWithResponse request returning *GetAuthorsResponse
func (c *ClientWithResponses) GetAuthorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthorsResponse, error) {
	rsp, err := c.GetAuthors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorsResponse(rsp)
}

// CreateAuthorWithBodyWithResponse request with arbitrary body returning *CreateAuthorResponse
func (c *ClientWithResponses) CreateAuthorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthorResponse, error) {
	rsp, err := c.CreateAuthorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthorResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthorWithResponse(ctx context.Context, body CreateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthorResponse, error) {
	rsp, err := c.CreateAuthor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthorResponse(rsp)
}

// UpdateAuthorWithBodyWithResponse request with arbitrary body returning *UpdateAuthorResponse
func (c *ClientWithResponses) UpdateAuthorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAuthorResponse, error) {
	rsp, err := c.UpdateAuthorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthorWithResponse(ctx context.Context, body UpdateAuthorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAuthorResponse, error) {
	rsp, err := c.UpdateAuthor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthorResponse(rsp)
}

// DeleteAuthorWithResponse request returning *DeleteAuthorResponse
func (c *ClientWithResponses) DeleteAuthorWithResponse(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*DeleteAuthorResponse, error) {
	rsp, err := c.DeleteAuthor(ctx, authorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorResponse(rsp)
}

// GetAuthorWithResponse request returning *GetAuthorResponse
func (c *ClientWithResponses) GetAuthorWithResponse(ctx context.Context, authorId AuthorId, reqEditors ...RequestEditorFn) (*GetAuthorResponse, error) {
	rsp, err := c.GetAuthor(ctx, authorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorResponse(rsp)
}

// ParseGetAuthorsResponse parses an HTTP response from a GetAuthorsWithResponse call
func ParseGetAuthorsResponse(rsp *http.Response) (*GetAuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAuthorResponse parses an HTTP response from a CreateAuthorWithResponse call
func ParseCreateAuthorResponse(rsp *http.Response) (*CreateAuthorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAuthorResponse parses an HTTP response from a UpdateAuthorWithResponse call
func ParseUpdateAuthorResponse(rsp *http.Response) (*UpdateAuthorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest AuthorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAuthorResponse parses an HTTP response from a DeleteAuthorWithResponse call
func ParseDeleteAuthorResponse(rsp *http.Response) (*DeleteAuthorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthorResponse parses an HTTP response from a GetAuthorWithResponse call
func ParseGetAuthorResponse(rsp *http.Response) (*GetAuthorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of all authors.
	// (GET /author)
	GetAuthors(ctx echo.Context) error
	// Create a new author.
	// (POST /author)
	CreateAuthor(ctx echo.Context) error
	// Update an exists author
	// (PUT /author)
	UpdateAuthor(ctx echo.Context) error
	// Delete an exists author by id.
	// (DELETE /author/{authorId})
	DeleteAuthor(ctx echo.Context, authorId AuthorId) error
	// Get an author by id.
	// (GET /author/{authorId})
	GetAuthor(ctx echo.Context, authorId AuthorId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthors converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthors(ctx)
	return err
}

// CreateAuthor converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthor(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthor(ctx)
	return err
}

// UpdateAuthor converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAuthor(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAuthor(ctx)
	return err
}

// DeleteAuthor converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAuthor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId AuthorId

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorId", runtime.ParamLocationPath, ctx.Param("authorId"), &authorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAuthor(ctx, authorId)
	return err
}

// GetAuthor converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId AuthorId

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorId", runtime.ParamLocationPath, ctx.Param("authorId"), &authorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthor(ctx, authorId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/author", wrapper.GetAuthors)
	router.POST(baseURL+"/author", wrapper.CreateAuthor)
	router.PUT(baseURL+"/author", wrapper.UpdateAuthor)
	router.DELETE(baseURL+"/author/:authorId", wrapper.DeleteAuthor)
	router.GET(baseURL+"/author/:authorId", wrapper.GetAuthor)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+V4jbHmXrh+0g0VvWDkOAYS2CDnvo8kBJJ5utRKrkKalh6H8fSMm2bMlu",
	"OyTNhuYpEXF3/O7jd0eeN5CqslISJRmIN1BxzUsk1O7ruqaV0jeZ/T9Dk2pRkVASYrjJUJLIRcrtAlM5",
	"oxUy7uzBA/zMy6pAiOEqv0rDqzydXFzixWQeXSaTq/nlbJJkeTrDZBEE8wvwQNigFacVeCB5aT35dnMP",
	"NH6qhcYMYtI1emDSFZbcoqJ1ZW0NaSGX0DSNNTaVkgZdBn+oV0oSShqm8OYjexC0UjWxRGVrsL5t4F7u",
	"t/ipRkOv371x7GhVoSbRxk6U+thys083ysIoC3gwSRaLxSQMMZvwnIeTIJpHPA2jIAgi8I5heyCO4nwl",
	"bYM4LXf9SH+JohC8HBo3fV7fWwSd+93OVCUfMCUbd8tGS+0PT8evWn+BDbQWh1v35GcLprUYAV2iMXyJ",
	"x87ERXHGrxnAtEtC5moo/eu3N077jDOD5ILKrFJCkmG50qzkki+FXHYFbayFPV6zLXT3QUrj1AIR5CC2",
	"GmHXb2/Ag3vUpt0smIbTwOalKpS8EhDDbBpMA/BcwTu2/K5zxBtY4kit/obk9i2EcXB5UWyxWQSWeNeI",
	"rP6scQvFwFE3iILA/kn3LYFXVdE1Mf+DsXttet1FEJbO8WeNOcTwk7/vln7XK/xhaeyPgmvN1+1JHCb0",
	"+1gijQfzb0R4DthApCM43q2Q6bbHsVTVRcakIpYgq7RK0RjMWIIprw0yQeyBG1byIle6xMzCXTwj3JyL",
	"AjNG6gju2inFoL5H3Tb1uiy5Xn9ZRsSXxtZ+twR3jQeVMiN6fKWREzLOJD50EaZ/y4ESW7Pr7a3YIf/F",
	"3jaPxdrgmmoOO5m9MJtBGYSPvv/ZY7tFo2qdIksdIdmL0p9a6WMCPaXwekTgf1aZ85cMPwtD5ozIW9P/",
	"oMjnzyTy2hHyDSLf3fK7ZwM8aCWXtz0qG+//VgsjWaX9fvhkGf2Lcjkh99GKabztc8XfbGeUpq2gAgmH",
	"tfTarX9VLbWmu1rqT2Pvx0nam/i7aa25G6+FMf+dnb8flV668xPL7YQirI/ITvXpkw9jLnsd/sRT+FHF",
	"9H0e0SO0H2T7ItPv8Vze0X1OnM7NRWi1VesCYlgRVbHvFyrlxUoZisNZNPPvQ99pqosyNpoejKB21OzP",
	"oYPxs/u5aDvyNXfNPwEAAP//w/yfZNUSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
